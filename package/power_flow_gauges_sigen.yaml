# Home Assistant Power Flow Gauges for Sigenergy Inverter
# https://github.com/TypQxQ/Sigenergy-Inverter-Modbus-Home-Assistant
# by Andrei Ignat (TypQxQ)
# last update: 2024-10-05
#

# This are Home Assistant entities used by the power flow gauges card.
# It is done in HA instead of the card itself with config-template-card to avoid flickering.

# To change the sensors to your own sensors, change the sensor names starting with "sensor.sigen_".
# To change duration of the statistics, change the "hours: 24" to the desired duration.

# The package uses the statistics integration to calculate the max and mean values for the power flow gauges.
# The package uses the input_text integration to store the values for the power flow gauges.
# The package uses the automation integration to calculate the power flow for the ESS when any of the sensors change,
# but waits for half a second to make sure all the sensors have updated.

################################################
# Sensors to calculate the power flow for the ESS.
################################################

template:
  - sensor:
      ################################################
      # Sensors to remap to your own sensors if not using the Sigen sensors.
      # These sensors will be initialized with 0 if the sensor is unavailable.
      ################################################
      - name: Power Flow Gauge - Total Consumption
        unique_id: power_flow_gauge_total_consumption
        state: >-
          {{ states('sensor.sigen_consumed_power') | float(0) }}

      - name: Power Flow Gauge - Total Solar
        unique_id: power_flow_gauge_total_solar
        state: >-
          {{ states('sensor.sigen_pv_power') | float(0) }}

      - name: Power Flow Gauge - Total Grid Import
        unique_id: power_flow_gauge_total_grid_import
        state: >-
          {{ states('sensor.sigen_grid_sensor_import_power') | float(0) }}

      - name: Power Flow Gauge - Total Grid Export
        unique_id: power_flow_gauge_total_grid_export
        state: >-
          {{ states('sensor.sigen_grid_sensor_export_power') | float(0) }}

      - name: Power Flow Gauge - Total Battery Discharging
        unique_id: power_flow_gauge_total_battery_discharging
        state: >-
          {{ states('sensor.sigen_battery_discharging_power') | float(0) }}

      - name: Power Flow Gauge - Total Battery Charging
        unique_id: power_flow_gauge_total_battery_charging
        state: >-
          {{ states('sensor.sigen_battery_charging_power') | float(0) }}

################################################
# Text input to store values for the power flow gauges to get the data.
################################################
input_text:
  power_flow_gauge_solar_to_house:
    name: Power Flow Gauge - Solar to House
    initial: 0

  power_flow_gauge_solar_to_battery:
    name: Power Flow Gauge - Solar to Battery
    initial: 0

  power_flow_gauge_solar_to_grid:
    name: Power Flow Gauge - Solar to Grid
    initial: 0

  power_flow_gauge_battery_to_house:
    name: Power Flow Gauge - Battery to House
    initial: 0

  power_flow_gauge_battery_to_grid:
    name: Power Flow Gauge - Battery to Grid
    initial: 0

  power_flow_gauge_grid_to_house:
    name: Power Flow Gauge - Grid to House
    initial: 0

  power_flow_gauge_grid_to_battery:
    name: Power Flow Gauge - Grid to Battery
    initial: 0

  power_flow_gauge_consumption_from_solar:
    name: Power Flow Gauge - Consumption from Solar
    initial: 0

  power_flow_gauge_consumption_from_battery:
    name: Power Flow Gauge - Consumption from Battery
    initial: 0

  power_flow_gauge_consumption_from_grid:
    name: Power Flow Gauge - Consumption from Grid
    initial: 0

################################################
# Sensors to calculate statistics.
################################################
sensor:
  - platform: statistics
    name: Power Flow Gauge - Max Consumption
    unique_id: power_flow_gauge_max_consumption
    # Change the entity_id to the sensor that you want to calculate the statistics.
    entity_id: sensor.power_flow_gauge_total_consumption
    state_characteristic: value_max
    max_age:
      # Change the max_age to the time that you want to calculate the statistics.
      hours: 24

  - platform: statistics
    name: Power Flow Gauge - Mean Consumption
    unique_id: power_flow_gauge_mean_consumption
    # Change the entity_id to the sensor that you want to calculate the statistics.
    entity_id: sensor.power_flow_gauge_total_consumption
    state_characteristic: mean
    max_age:
      # Change the max_age to the time that you want to calculate the statistics.
      hours: 24

  - platform: statistics
    name: Power Flow Gauge - Max Solar
    unique_id: power_flow_gauge_max_solar
    # Change the entity_id to the sensor that you want to calculate the statistics.
    entity_id: sensor.power_flow_gauge_total_solar
    state_characteristic: value_max
    max_age:
      # Change the max_age to the time that you want to calculate the statistics.
      hours: 24

  - platform: statistics
    name: Power Flow Gauge - Mean Solar
    unique_id: power_flow_gauge_mean_solar
    # Change the entity_id to the sensor that you want to calculate the statistics.
    entity_id: sensor.power_flow_gauge_total_solar
    state_characteristic: mean
    max_age:
      # Change the max_age to the time that you want to calculate the statistics.
      hours: 24

  - platform: statistics
    name: Power Flow Gauge - Max Grid Import
    unique_id: power_flow_gauge_max_grid_import
    # Change the entity_id to the sensor that you want to calculate the statistics.
    entity_id: sensor.power_flow_gauge_total_grid_import
    state_characteristic: value_max
    max_age:
      # Change the max_age to the time that you want to calculate the statistics.
      hours: 24

  - platform: statistics
    name: Power Flow Gauge - Mean Grid Import
    unique_id: power_flow_gauge_mean_grid_import
    # Change the entity_id to the sensor that you want to calculate the statistics.
    entity_id: sensor.power_flow_gauge_total_grid_import
    state_characteristic: mean
    max_age:
      # Change the max_age to the time that you want to calculate the statistics.
      hours: 24

  - platform: statistics
    name: Power Flow Gauge - Max Grid Export
    unique_id: power_flow_gauge_max_grid_export
    # Change the entity_id to the sensor that you want to calculate the statistics.
    entity_id: sensor.power_flow_gauge_total_grid_export
    state_characteristic: value_max
    max_age:
      # Change the max_age to the time that you want to calculate the statistics.
      hours: 24

  - platform: statistics
    name: Power Flow Gauge - Mean Grid Export
    unique_id: power_flow_gauge_mean_grid_export
    # Change the entity_id to the sensor that you want to calculate the statistics.
    entity_id: sensor.power_flow_gauge_total_grid_export
    state_characteristic: mean
    max_age:
      # Change the max_age to the time that you want to calculate the statistics.
      hours: 24

  - platform: statistics
    name: Power Flow Gauge - Max Battery Discharging
    unique_id: power_flow_gauge_max_battery_discharging
    # Change the entity_id to the sensor that you want to calculate the statistics.
    entity_id: sensor.power_flow_gauge_total_battery_discharging
    state_characteristic: value_max
    max_age:
      # Change the max_age to the time that you want to calculate the statistics.
      hours: 24

  - platform: statistics
    name: Power Flow Gauge - Mean Battery Discharging
    unique_id: power_flow_gauge_mean_battery_discharging
    # Change the entity_id to the sensor that you want to calculate the statistics.
    entity_id: sensor.power_flow_gauge_total_battery_discharging
    state_characteristic: mean
    max_age:
      # Change the max_age to the time that you want to calculate the statistics.
      hours: 24

  - platform: statistics
    name: Power Flow Gauge - Max Battery Charging
    unique_id: power_flow_gauge_max_battery_charging
    # Change the entity_id to the sensor that you want to calculate the statistics.
    entity_id: sensor.power_flow_gauge_total_battery_charging
    state_characteristic: value_max
    max_age:
      # Change the max_age to the time that you want to calculate the statistics.
      hours: 24

  - platform: statistics
    name: Power Flow Gauge - Mean Battery Charging
    unique_id: power_flow_gauge_mean_battery_charging
    # Change the entity_id to the sensor that you want to calculate the statistics.
    entity_id: sensor.power_flow_gauge_total_battery_charging
    state_characteristic: mean
    max_age:
      # Change the max_age to the time that you want to calculate the statistics.
      hours: 24

################################################
# Automation to calculate the power flow for the ESS.
################################################

automation:
  - id: "power_flow_gauge_calculations"
    alias: "Power Flow Gauge - Calculations"
    description: "The logic to calculate the power flow for the ESS."
    mode: single
    max_exceeded: silent
    trigger:
      - platform: state
        entity_id:
          - sensor.power_flow_gauge_total_grid_import
      - platform: state
        entity_id:
          - sensor.power_flow_gauge_total_solar
      - platform: state
        entity_id:
          - sensor.power_flow_gauge_total_battery_discharging
    condition:
      - condition: template
        value_template:
          "{{ not states('sensor.power_flow_gauge_total_battery_discharging') in ['unknown', 'unavailable']
          and not states('sensor.power_flow_gauge_total_grid_import') in ['unknown', 'unavailable']
          and not states('sensor.power_flow_gauge_total_solar') in ['unknown', 'unavailable'] }}"
    action:
      - delay: 0.5 # Delay to wait for all the sensors to update.

      ################################################
      # Set production power flow gauge values.
      ################################################
      - action: input_text.set_value
        ### Solar production to consumption. ###
        target:
          entity_id: input_text.power_flow_gauge_solar_to_house
        # All Solar production, or consumption if the solar production is higher than the consumption.
        data:
          value: "{{ min(states('sensor.power_flow_gauge_total_solar') | float(0), states('sensor.power_flow_gauge_total_consumption') | float(0)) }}"

        ################################################
      - action: input_text.set_value
        target:
          entity_id: input_text.power_flow_gauge_solar_to_battery
        data:
          value:
            # Solar to battery is at most the difference between
            # solar production and consumption from solar,
            # not higher than the battery charging power
            # and not less than 0.
            "{{ max(0, min(states('sensor.power_flow_gauge_total_battery_charging') | float(0),
            max(0, states('sensor.power_flow_gauge_total_solar') | float(0)
            - states('input_text.power_flow_gauge_solar_to_house') | float(0)))) }}"

        ################################################
      - action: input_text.set_value
        target:
          entity_id: input_text.power_flow_gauge_solar_to_grid
        data:
          value:
            # Solar to grid is at most the difference between
            # solar production, charging from solar and consumption from solar,
            # not higher than the grid export power and not less than 0.
            "{{ min(states('sensor.power_flow_gauge_total_grid_export') | float(0),
            max(0, states('sensor.power_flow_gauge_total_solar') | float(0)
            - states('input_text.power_flow_gauge_solar_to_battery') | float(0)
            - states('input_text.power_flow_gauge_solar_to_house') | float(0))) }}"

      ################################################
      # Set battery power flow gauge values.
      ################################################
      - action: input_text.set_value
        target:
          entity_id: input_text.power_flow_gauge_battery_to_house
        data:
          value:
            # Is at most the difference between consumption and consumption from solar,
            # not higher than the battery discharging power.
            "{{ min(states('sensor.power_flow_gauge_total_battery_discharging') | float(0),
            max(0, states('sensor.power_flow_gauge_total_consumption') | float(0)
            - states('input_text.power_flow_gauge_consumption_from_solar') | float(0))) }}"

        ################################################
      - action: input_text.set_value
        target:
          entity_id: input_text.power_flow_gauge_battery_to_grid
        data:
          # Is at most the difference between total battery discharging and battery to house,
          # not less than 0 and not more than the grid export power.
          value:
            "{{ min(states('sensor.power_flow_gauge_total_grid_export') | float(0),
            max(0, states('sensor.power_flow_gauge_total_battery_discharging') | float(0)
            - states('input_text.power_flow_gauge_battery_to_house') | float(0))) }}"

      ################################################
      # Set Grid import power flow gauge values.
      ################################################
      - action: input_text.set_value
        target:
          entity_id: input_text.power_flow_gauge_grid_to_house
        data:
          value:
            # Is at most the difference between total consumption, solar to house and battery to house,
            # not less than 0.
            "{{ max(0, states('sensor.power_flow_gauge_total_consumption') | float(0)
            - states('input_text.power_flow_gauge_solar_to_house') | float(0)
            - states('input_text.power_flow_gauge_battery_to_house') | float(0)) }}"

        ################################################
      - action: input_text.set_value
        target:
          entity_id: input_text.power_flow_gauge_grid_to_battery
        data:
          # Is at most the difference between total grid import and grid to house,
          # not higher than the battery charging power and not less than 0.
          value:
            "{{ min(states('sensor.power_flow_gauge_total_battery_charging') | float(0),
            max(0, states('sensor.power_flow_gauge_total_grid_import') | float(0)
            - states('input_text.power_flow_gauge_grid_to_house') | float(0))) }}"          

      ################################################
      # House power flow gauge values.
      # Calculated in the previous steps.
      ################################################
      - action: input_text.set_value
        target:
          entity_id: input_text.power_flow_gauge_consumption_from_solar
        data:
          value: "{{ states('input_text.power_flow_gauge_solar_to_house') | float(0) }}"

        ################################################
      - action: input_text.set_value
        target:
          entity_id: input_text.power_flow_gauge_consumption_from_battery
        data:
          value: "{{ states('input_text.power_flow_gauge_battery_to_house') | float(0) }}"

        ################################################
      - action: input_text.set_value
        target:
          entity_id: input_text.power_flow_gauge_consumption_from_grid
        data:
          value: "{{ states('input_text.power_flow_gauge_grid_to_house') | float(0) }}"
