views:
  - title: All gauges
    path: alla-nya-gauges
    cards:
      - type: vertical-stack
        cards:
          - type: custom:apexcharts-card
            chart_type: donut
            show:
              loading: false
            header:
              show: true
              show_states: true
              colorize_states: true
            apex_config:
              plotOptions:
                pie:
                  startAngle: -90
                  endAngle: 90
                  offsetY: 0
                  donut:
                    labels:
                      show: true
                      name:
                        offsetY: -75
                        formatter: |
                          EVAL:function(w) {
                            return "Consumption";
                          }
                      value:
                        offsetY: -30
                        fontSize: 50px
                        formatter: |
                          EVAL:function(w) {
                            return (w.globals.series[0]
                            + w.globals.series[1]
                            + w.globals.series[2]
                            ).toFixed(1) + " kW";
                          }
                      total:
                        fontSize: 28px
                        show: true
                        color: '#8B4513'
                        formatter: |
                          EVAL:function(w) {
                            return (w.globals.series[0]
                            + w.globals.series[1]
                            + w.globals.series[2]
                            ).toFixed(1) + " kW";
                          }
              chart:
                height: 450px
                animations:
                  enabled: true
                  easing: easeinout
                  speed: 800
                  animateGradually:
                    enabled: true
                    delay: 150
                  dynamicAnimation:
                    enabled: true
                    speed: 350
              stroke:
                show: true
                opacity: 0
              legend:
                show: false
              dataLabels:
                enabled: false
            series:
              - entity: input_text.power_flow_gauge_consumption_from_solar
                name: Solar
                float_precision: 2
                color: '#FFBF00'
                unit: ' kW'
              - entity: input_text.power_flow_gauge_consumption_from_battery
                name: Battery
                float_precision: 2
                color: '#7a50d9'
                unit: ' kW'
              - entity: input_text.power_flow_gauge_consumption_from_grid
                name: Grid
                float_precision: 2
                color: '#FF4646'
                unit: ' kW'
              - entity: sensor.power_flow_gauge_mean_consumption
                name: Mean / 24h.
                opacity: 0.5
                float_precision: 2
                color: rgb(50, 50, 50)
                show:
                  in_header: false
                data_generator: >
                  return [[new Date().getTime(), Math.max(0,
                  parseFloat(hass.states['sensor.power_flow_gauge_mean_consumption'].state)
                    - parseFloat(hass.states['input_text.power_flow_gauge_consumption_from_solar'].state)
                    - parseFloat(hass.states['input_text.power_flow_gauge_consumption_from_battery'].state)
                    - parseFloat(hass.states['input_text.power_flow_gauge_consumption_from_grid'].state)
                    )]];
              - entity: sensor.power_flow_gauge_max_consumption
                name: Diff. to max.
                opacity: 0.1
                float_precision: 2
                color: rgb(50, 50, 50)
                show:
                  in_header: false
                data_generator: >
                  return [[new Date().getTime(),
                  parseFloat(hass.states['sensor.power_flow_gauge_max_consumption'].state) 
                    -Math.max(parseFloat(hass.states['sensor.power_flow_gauge_mean_consumption'].state),
                      parseFloat(hass.states['input_text.power_flow_gauge_consumption_from_solar'].state)
                      + parseFloat(hass.states['input_text.power_flow_gauge_consumption_from_battery'].state)
                      + parseFloat(hass.states['input_text.power_flow_gauge_consumption_from_grid'].state)
                    )]];
                    
            card_mod:
              style: |
                ha-card {
                  height: 270px;
                  --apexcharts-xaxis-labels-color: red;
                }
          - show_name: true
            show_icon: false
            show_state: true
            type: glance
            entities:
              - entity: sensor.power_flow_gauge_mean_consumption
                name: Mean / 24h
              - entity: sensor.power_flow_gauge_max_consumption
                name: Max / 24h
      - type: vertical-stack
        cards:
          - type: custom:apexcharts-card
            chart_type: donut
            show:
              loading: false
            header:
              show: true
              show_states: true
              colorize_states: true
            apex_config:
              plotOptions:
                pie:
                  startAngle: -90
                  endAngle: 90
                  offsetY: 0
                  donut:
                    labels:
                      show: true
                      name:
                        offsetY: -75
                        formatter: |
                          EVAL:function(w) {
                            return "Solar";
                          }
                      value:
                        offsetY: -30
                        fontSize: 50px
                        formatter: |
                          EVAL:function(w) {
                            return (w.globals.series[0]
                            + w.globals.series[1]
                            + w.globals.series[2]
                            ).toFixed(1) + " kW";
                          }
                      total:
                        show: true
                        color: '#FFBF00'
                        fontSize: 28px
                        formatter: |
                          EVAL:function(w) {
                            return (w.globals.series[0]
                            + w.globals.series[1]
                            + w.globals.series[2]
                            ).toFixed(1) + " kW";
                          }
              chart:
                height: 450px
                animations:
                  enabled: true
                  easing: easeinout
                  speed: 800
                  animateGradually:
                    enabled: true
                    delay: 150
                  dynamicAnimation:
                    enabled: true
                    speed: 350
              stroke:
                show: true
                opacity: 0
              legend:
                show: false
              dataLabels:
                enabled: false
            series:
              - entity: input_text.power_flow_gauge_solar_to_house
                name: Self Consumption
                float_precision: 2
                color: '#8B4513'
                unit: ' kW'
              - entity: input_text.power_flow_gauge_solar_to_battery
                name: Battery
                float_precision: 2
                color: '#7a50d9'
                unit: ' kW'
              - entity: input_text.power_flow_gauge_solar_to_grid
                name: To Grid
                float_precision: 2
                color: '#80b5f8'
                unit: ' kW'
              - entity: sensor.power_flow_gauge_mean_solar
                name: Mean / 24h.
                opacity: 0.5
                color: rgb(50, 50, 50)
                show:
                  in_header: false
                data_generator: >
                  return [[new Date().getTime(), Math.max(0,
                  parseFloat(hass.states['sensor.power_flow_gauge_mean_solar'].state)
                    - parseFloat(hass.states['input_text.power_flow_gauge_solar_to_house'].state)
                    - parseFloat(hass.states['input_text.power_flow_gauge_solar_to_battery'].state)
                    - parseFloat(hass.states['input_text.power_flow_gauge_solar_to_grid'].state)
                    )]];
              - entity: sensor.power_flow_gauge_max_solar
                name: Diff. to max.
                opacity: 0.1
                color: rgb(50, 50, 50)
                show:
                  in_header: false
                data_generator: >
                  return [[new Date().getTime(),
                  parseFloat(hass.states['sensor.power_flow_gauge_max_solar'].state) 
                    -Math.max(parseFloat(hass.states['sensor.power_flow_gauge_mean_solar'].state),
                      parseFloat(hass.states['input_text.power_flow_gauge_solar_to_house'].state)
                      + parseFloat(hass.states['input_text.power_flow_gauge_solar_to_battery'].state)
                      + parseFloat(hass.states['input_text.power_flow_gauge_solar_to_grid'].state)
                    )]];
            card_mod:
              style: |
                ha-card {
                  height: 270px;
                  --apexcharts-xaxis-labels-color: red;
                }
          - show_name: true
            show_icon: false
            show_state: true
            type: glance
            entities:
              - entity: sensor.power_flow_gauge_mean_solar
                name: Mean / 24h
              - entity: sensor.power_flow_gauge_max_solar
                name: Max / 24h
      - type: vertical-stack
        cards:
          - type: custom:apexcharts-card
            chart_type: donut
            show:
              loading: false
            header:
              show: true
              show_states: true
              colorize_states: true
            apex_config:
              plotOptions:
                pie:
                  startAngle: -90
                  endAngle: 90
                  offsetY: 0
                  donut:
                    labels:
                      show: true
                      name:
                        offsetY: -75
                        formatter: |
                          EVAL:function(w) {
                            return "Grid in";
                          }
                      value:
                        offsetY: -30
                        fontSize: 50px
                        formatter: |
                          EVAL:function(w) {
                            return (w.globals.series[0]
                            + w.globals.series[1]
                            ).toFixed(1) + " kW";
                          }
                      total:
                        show: true
                        fontSize: 28px
                        color: '#FF4646'
                        formatter: |
                          EVAL:function(w) {
                            return (w.globals.series[0]
                            + w.globals.series[1]
                            ).toFixed(1) + " kW";
                          }
              chart:
                height: 450px
                animations:
                  enabled: true
                  easing: easeinout
                  speed: 800
                  animateGradually:
                    enabled: true
                    delay: 150
                  dynamicAnimation:
                    enabled: true
                    speed: 350
              stroke:
                show: true
                opacity: 0
              legend:
                show: false
              dataLabels:
                enabled: false
            series:
              - entity: input_text.power_flow_gauge_grid_to_house
                name: Self Consumption
                float_precision: 2
                color: '#8B4513'
                unit: ' kW'
              - entity: input_text.power_flow_gauge_grid_to_battery
                name: To Battery
                float_precision: 2
                color: '#7a50d9'
                unit: ' kW'
              - entity: sensor.power_flow_gauge_mean_grid_import
                name: Diff. to mean.
                opacity: 0.5
                color: rgb(50, 50, 50)
                show:
                  in_header: false
                data_generator: >
                  return [[new Date().getTime(), Math.max(0,
                  parseFloat(hass.states['sensor.power_flow_gauge_mean_grid_import'].state)
                    - parseFloat(hass.states['input_text.power_flow_gauge_grid_to_house'].state)
                    - parseFloat(hass.states['input_text.power_flow_gauge_grid_to_battery'].state)
                    )]];
              - entity: sensor.power_flow_gauge_max_grid_import
                name: Diff. to max.
                opacity: 0.1
                color: rgb(50, 50, 50)
                show:
                  in_header: false
                data_generator: >
                  return [[new Date().getTime(),
                  parseFloat(hass.states['sensor.power_flow_gauge_max_grid_import'].state) 
                    -Math.max(parseFloat(hass.states['sensor.power_flow_gauge_mean_grid_import'].state),
                      parseFloat(hass.states['input_text.power_flow_gauge_grid_to_house'].state)
                      + parseFloat(hass.states['input_text.power_flow_gauge_grid_to_battery'].state)
                    )]];
                          
            card_mod:
              style: |
                ha-card {
                  height: 270px;
                  --apexcharts-xaxis-labels-color: red;
                }
          - show_name: true
            show_icon: false
            show_state: true
            type: glance
            entities:
              - entity: sensor.power_flow_gauge_mean_grid_import
                name: Mean / 24h
              - entity: sensor.power_flow_gauge_max_grid_import
                name: Max / 24h
      - type: vertical-stack
        cards:
          - type: custom:apexcharts-card
            chart_type: donut
            show:
              loading: false
            header:
              show: true
              show_states: true
              colorize_states: true
            apex_config:
              plotOptions:
                pie:
                  startAngle: -90
                  endAngle: 90
                  offsetY: 0
                  donut:
                    labels:
                      show: true
                      name:
                        offsetY: -75
                        formatter: |
                          EVAL:function(w) {
                            return "Grid out";
                          }
                      value:
                        offsetY: -30
                        fontSize: 50px
                        formatter: |
                          EVAL:function(w) {
                            return (w.globals.series[0]
                            + w.globals.series[1]
                            ).toFixed(1) + " kW";
                          }            
                      total:
                        show: true
                        fontSize: 28px
                        color: '#80b5f8'
                        formatter: |
                          EVAL:function(w) {
                            return (w.globals.series[0]
                            + w.globals.series[1]
                            ).toFixed(1) + " kW";
                          }
              chart:
                height: 450px
                animations:
                  enabled: true
                  easing: easeinout
                  speed: 800
                  animateGradually:
                    enabled: true
                    delay: 150
                  dynamicAnimation:
                    enabled: true
                    speed: 350
              stroke:
                show: true
                opacity: 0
              legend:
                show: false
              dataLabels:
                enabled: false
            series:
              - entity: input_text.power_flow_gauge_solar_to_grid
                name: From Solar
                float_precision: 2
                color: '#FFBF00'
                unit: ' kW'
              - entity: input_text.power_flow_gauge_battery_to_grid
                name: From Battery
                float_precision: 2
                color: '#7a50d9'
                unit: ' kW'
              - entity: sensor.power_flow_gauge_mean_grid_export
                name: Diff. to mean.
                opacity: 0.5
                color: rgb(50, 50, 50)
                show:
                  in_header: false
                data_generator: >
                  return [[new Date().getTime(), Math.max(0,
                  parseFloat(hass.states['sensor.power_flow_gauge_mean_grid_export'].state)
                    - parseFloat(hass.states['input_text.power_flow_gauge_solar_to_grid'].state)
                    - parseFloat(hass.states['input_text.power_flow_gauge_battery_to_grid'].state)
                    )]];      
              - entity: sensor.power_flow_gauge_max_grid_export
                name: Diff. to max.
                opacity: 0.1
                color: rgb(50, 50, 50)
                show:
                  in_header: false
                data_generator: >
                  return [[new Date().getTime(),
                  parseFloat(hass.states['sensor.power_flow_gauge_max_grid_export'].state) 
                    -Math.max(parseFloat(hass.states['sensor.power_flow_gauge_mean_grid_export'].state),
                      parseFloat(hass.states['input_text.power_flow_gauge_solar_to_grid'].state)
                      + parseFloat(hass.states['input_text.power_flow_gauge_battery_to_grid'].state)
                    )]];      
            card_mod:
              style: |
                ha-card {
                  height: 270px;
                  --apexcharts-xaxis-labels-color: red;
                }
          - show_name: true
            show_icon: false
            show_state: true
            type: glance
            entities:
              - entity: sensor.power_flow_gauge_mean_grid_export
                name: Mean / 24h
              - entity: sensor.power_flow_gauge_max_grid_export
                name: Max / 24h
      - type: vertical-stack
        cards:
          - type: custom:apexcharts-card
            chart_type: donut
            show:
              loading: false
            header:
              show: true
              show_states: true
              colorize_states: true
            apex_config:
              plotOptions:
                pie:
                  startAngle: -90
                  endAngle: 90
                  offsetY: 0
                  donut:
                    labels:
                      show: true
                      name:
                        offsetY: -75
                        formatter: |
                          EVAL:function(w) {
                              return "Charging";
                          }
                      value:
                        offsetY: -30
                        fontSize: 50px
                        formatter: |
                          EVAL:function(w) {
                            return (w.globals.series[0]
                            + w.globals.series[1]
                            ).toFixed(1) + " kW";
                          }            
                      total:
                        show: true
                        fontSize: 28px
                        color: '#7a50d9'
                        formatter: |
                          EVAL:function(w) {
                            return (w.globals.series[0]
                            + w.globals.series[1]
                            ).toFixed(1) + " kW";
                          }
              chart:
                height: 450px
                animations:
                  enabled: true
                  easing: easeinout
                  speed: 800
                  animateGradually:
                    enabled: true
                    delay: 150
                  dynamicAnimation:
                    enabled: true
                    speed: 350
              stroke:
                show: true
                opacity: 0
              legend:
                show: false
              dataLabels:
                enabled: false
            series:
              - entity: input_text.power_flow_gauge_solar_to_battery
                name: From Solar
                float_precision: 2
                color: '#FFBF00'
                unit: ' kW'
              - entity: input_text.power_flow_gauge_grid_to_battery
                name: From Grid
                float_precision: 2
                color: '#FF4646'
                unit: ' kW'
              - entity: sensor.power_flow_gauge_mean_battery_charging
                name: Diff. to mean.
                opacity: 0.5
                color: rgb(50, 50, 50)
                data_generator: >
                  return [[new Date().getTime(), Math.max(0,
                  parseFloat(hass.states['sensor.power_flow_gauge_mean_battery_charging'].state)
                    - parseFloat(hass.states['input_text.power_flow_gauge_solar_to_battery'].state)
                    - parseFloat(hass.states['input_text.power_flow_gauge_grid_to_battery'].state)
                    )]];    
                show:
                  in_header: false
              - entity: sensor.power_flow_gauge_max_battery_charging
                name: Diff. to max.
                opacity: 0.1
                color: rgb(50, 50, 50)
                show:
                  in_header: false
                data_generator: >
                  return [[new Date().getTime(),
                  parseFloat(hass.states['sensor.power_flow_gauge_max_battery_charging'].state) 
                    -Math.max(parseFloat(hass.states['sensor.power_flow_gauge_mean_battery_charging'].state),
                      parseFloat(hass.states['input_text.power_flow_gauge_solar_to_battery'].state)
                      + parseFloat(hass.states['input_text.power_flow_gauge_grid_to_battery'].state)
                    )]];      
            card_mod:
              style: |
                ha-card {
                  height: 270px;
                  --apexcharts-xaxis-labels-color: red;
                }
          - show_name: true
            show_icon: false
            show_state: true
            type: glance
            entities:
              - entity: sensor.power_flow_gauge_mean_battery_charging
                name: Mean / 24h
              - entity: sensor.power_flow_gauge_max_battery_charging
                name: Max / 24h
      - type: vertical-stack
        cards:
          - type: custom:apexcharts-card
            chart_type: donut
            show:
              loading: false
            header:
              show: true
              show_states: true
              colorize_states: true
            apex_config:
              plotOptions:
                pie:
                  startAngle: -90
                  endAngle: 90
                  offsetY: 0
                  donut:
                    labels:
                      show: true
                      name:
                        offsetY: -75
                        formatter: |
                          EVAL:function(w) {
                              return "Discharging";
                          }
                      value:
                        offsetY: -30
                        fontSize: 50px
                        formatter: |
                          EVAL:function(w) {
                            return (w.globals.series[0]
                            + w.globals.series[1]
                            ).toFixed(1) + " kW";
                          }            
                      total:
                        show: true
                        fontSize: 28px
                        color: '#7a50d9'
                        formatter: |
                          EVAL:function(w) {
                            return (w.globals.series[0]
                            + w.globals.series[1]
                            ).toFixed(1) + " kW";
                          }
              chart:
                height: 450px
                animations:
                  enabled: true
                  easing: easeinout
                  speed: 800
                  animateGradually:
                    enabled: true
                    delay: 150
                  dynamicAnimation:
                    enabled: true
                    speed: 350
              stroke:
                show: true
                opacity: 0
              legend:
                show: false
              dataLabels:
                enabled: false
            series:
              - entity: input_text.power_flow_gauge_battery_to_house
                name: Self Consumption
                float_precision: 2
                color: '#8B4513'
                unit: ' kW'
              - entity: input_text.power_flow_gauge_battery_to_grid
                name: To Grid
                float_precision: 2
                color: '#FF4646'
                unit: ' kW'
              - entity: sensor.power_flow_gauge_mean_battery_discharging
                name: Diff. to mean.
                opacity: 0.5
                color: rgb(50, 50, 50)
                show:
                  in_header: false
                data_generator: >
                  return [[new Date().getTime(), Math.max(0,
                  parseFloat(hass.states['sensor.power_flow_gauge_mean_battery_discharging'].state)
                    - parseFloat(hass.states['input_text.power_flow_gauge_battery_to_house'].state)
                    - parseFloat(hass.states['input_text.power_flow_gauge_battery_to_grid'].state)
                    )]];       
              - entity: sensor.power_flow_gauge_max_battery_discharging
                name: Diff. to max.
                opacity: 0.1
                color: rgb(50, 50, 50)
                show:
                  in_header: false
                data_generator: >
                  return [[new Date().getTime(),
                  parseFloat(hass.states['sensor.power_flow_gauge_max_battery_discharging'].state) 
                    -Math.max(parseFloat(hass.states['sensor.power_flow_gauge_mean_battery_discharging'].state),
                      parseFloat(hass.states['input_text.power_flow_gauge_battery_to_house'].state)
                      + parseFloat(hass.states['input_text.power_flow_gauge_battery_to_grid'].state)
                    )]];          
            card_mod:
              style: |
                ha-card {
                  height: 270px;
                  --apexcharts-xaxis-labels-color: red;
                }
          - show_name: true
            show_icon: false
            show_state: true
            type: glance
            entities:
              - entity: sensor.power_flow_gauge_mean_battery_discharging
                name: Mean / 24h
              - entity: sensor.power_flow_gauge_max_battery_discharging
                name: Max / 24h
  - title: 2 Visible gauges
    path: new-energy-flow-29sept
    type: sections
    max_columns: 2
    sections:
      - type: grid
        cards:
          - type: vertical-stack
            cards:
              - type: custom:apexcharts-card
                chart_type: donut
                show:
                  loading: false
                header:
                  show: true
                  show_states: true
                  colorize_states: true
                apex_config:
                  plotOptions:
                    pie:
                      startAngle: -90
                      endAngle: 90
                      offsetY: 0
                      donut:
                        labels:
                          show: true
                          name:
                            offsetY: -75
                            formatter: |
                              EVAL:function(w) {
                                return "Consumption";
                              }
                          value:
                            offsetY: -30
                            fontSize: 50px
                            formatter: |
                              EVAL:function(w) {
                                return (w.globals.series[0]
                                + w.globals.series[1]
                                + w.globals.series[2]
                                ).toFixed(1) + " kW";
                              }
                          total:
                            fontSize: 28px
                            show: true
                            color: '#8B4513'
                            formatter: |
                              EVAL:function(w) {
                                return (w.globals.series[0]
                                + w.globals.series[1]
                                + w.globals.series[2]
                                ).toFixed(1) + " kW";
                              }
                  chart:
                    height: 450px
                    animations:
                      enabled: true
                      easing: easeinout
                      speed: 800
                      animateGradually:
                        enabled: true
                        delay: 150
                      dynamicAnimation:
                        enabled: true
                        speed: 350
                  stroke:
                    show: true
                    opacity: 0
                  legend:
                    show: false
                  dataLabels:
                    enabled: false
                series:
                  - entity: input_text.power_flow_gauge_consumption_from_solar
                    name: Solar
                    float_precision: 2
                    color: '#FFBF00'
                    unit: ' kW'
                  - entity: input_text.power_flow_gauge_consumption_from_battery
                    name: Battery
                    float_precision: 2
                    color: '#7a50d9'
                    unit: ' kW'
                  - entity: input_text.power_flow_gauge_consumption_from_grid
                    name: Grid
                    float_precision: 2
                    color: '#FF4646'
                    unit: ' kW'
                  - entity: sensor.power_flow_gauge_mean_consumption
                    name: Mean / 24h.
                    opacity: 0.5
                    float_precision: 2
                    color: rgb(50, 50, 50)
                    show:
                      in_header: false
                    data_generator: >
                      return [[new Date().getTime(), Math.max(0,
                      parseFloat(hass.states['sensor.power_flow_gauge_mean_consumption'].state)
                        - parseFloat(hass.states['input_text.power_flow_gauge_consumption_from_solar'].state)
                        - parseFloat(hass.states['input_text.power_flow_gauge_consumption_from_battery'].state)
                        - parseFloat(hass.states['input_text.power_flow_gauge_consumption_from_grid'].state)
                        )]];
                  - entity: sensor.power_flow_gauge_max_consumption
                    name: Diff. to max.
                    opacity: 0.1
                    float_precision: 2
                    color: rgb(50, 50, 50)
                    show:
                      in_header: false
                    data_generator: >
                      return [[new Date().getTime(),
                      parseFloat(hass.states['sensor.power_flow_gauge_max_consumption'].state) 
                        -Math.max(parseFloat(hass.states['sensor.power_flow_gauge_mean_consumption'].state),
                          parseFloat(hass.states['input_text.power_flow_gauge_consumption_from_solar'].state)
                          + parseFloat(hass.states['input_text.power_flow_gauge_consumption_from_battery'].state)
                          + parseFloat(hass.states['input_text.power_flow_gauge_consumption_from_grid'].state)
                        )]];
                        
                card_mod:
                  style: |
                    ha-card {
                      height: 270px;
                      --apexcharts-xaxis-labels-color: red;
                    }
              - show_name: true
                show_icon: false
                show_state: true
                type: glance
                entities:
                  - entity: sensor.power_flow_gauge_mean_consumption
                    name: Mean
                  - entity: sensor.power_flow_gauge_max_consumption
                    name: Max
      - type: grid
        cards:
          - type: vertical-stack
            cards:
              - type: custom:apexcharts-card
                chart_type: donut
                show:
                  loading: false
                header:
                  show: true
                  show_states: true
                  colorize_states: true
                apex_config:
                  plotOptions:
                    pie:
                      startAngle: -90
                      endAngle: 90
                      offsetY: 0
                      donut:
                        labels:
                          show: true
                          name:
                            offsetY: -75
                            formatter: |
                              EVAL:function(w) {
                                return "Solar";
                              }
                          value:
                            offsetY: -30
                            fontSize: 50px
                            formatter: |
                              EVAL:function(w) {
                                return (w.globals.series[0]
                                + w.globals.series[1]
                                + w.globals.series[2]
                                ).toFixed(1) + " kW";
                              }
                          total:
                            show: true
                            color: '#FFBF00'
                            fontSize: 28px
                            formatter: |
                              EVAL:function(w) {
                                return (w.globals.series[0]
                                + w.globals.series[1]
                                + w.globals.series[2]
                                ).toFixed(1) + " kW";
                              }
                  chart:
                    height: 450px
                    animations:
                      enabled: true
                      easing: easeinout
                      speed: 800
                      animateGradually:
                        enabled: true
                        delay: 150
                      dynamicAnimation:
                        enabled: true
                        speed: 350
                  stroke:
                    show: true
                    opacity: 0
                  legend:
                    show: false
                  dataLabels:
                    enabled: false
                series:
                  - entity: input_text.power_flow_gauge_solar_to_house
                    name: Self Consumption
                    float_precision: 2
                    color: '#8B4513'
                    unit: ' kW'
                  - entity: input_text.power_flow_gauge_solar_to_battery
                    name: Battery
                    float_precision: 2
                    color: '#7a50d9'
                    unit: ' kW'
                  - entity: input_text.power_flow_gauge_solar_to_grid
                    name: To Grid
                    float_precision: 2
                    color: '#80b5f8'
                    unit: ' kW'
                  - entity: sensor.power_flow_gauge_mean_solar
                    name: Mean / 24h.
                    opacity: 0.5
                    color: rgb(50, 50, 50)
                    show:
                      in_header: false
                    data_generator: >
                      return [[new Date().getTime(), Math.max(0,
                      parseFloat(hass.states['sensor.power_flow_gauge_mean_solar'].state)
                        - parseFloat(hass.states['input_text.power_flow_gauge_solar_to_house'].state)
                        - parseFloat(hass.states['input_text.power_flow_gauge_solar_to_battery'].state)
                        - parseFloat(hass.states['input_text.power_flow_gauge_solar_to_grid'].state)
                        )]];
                  - entity: sensor.power_flow_gauge_max_solar
                    name: Diff. to max.
                    opacity: 0.1
                    color: rgb(50, 50, 50)
                    show:
                      in_header: false
                    data_generator: >
                      return [[new Date().getTime(),
                      parseFloat(hass.states['sensor.power_flow_gauge_max_solar'].state) 
                        -Math.max(parseFloat(hass.states['sensor.power_flow_gauge_mean_solar'].state),
                          parseFloat(hass.states['input_text.power_flow_gauge_solar_to_house'].state)
                          + parseFloat(hass.states['input_text.power_flow_gauge_solar_to_battery'].state)
                          + parseFloat(hass.states['input_text.power_flow_gauge_solar_to_grid'].state)
                        )]];
                card_mod:
                  style: |
                    ha-card {
                      height: 270px;
                      --apexcharts-xaxis-labels-color: red;
                    }
              - show_name: true
                show_icon: false
                show_state: true
                type: glance
                entities:
                  - entity: sensor.power_flow_gauge_mean_solar
                    name: Mean 24h
                  - entity: sensor.power_flow_gauge_max_solar
                    name: Max 24h
        visibility:
          - condition: numeric_state
            entity: sensor.sigen_pv_power
            above: 0.1
      - type: grid
        cards:
          - type: vertical-stack
            cards:
              - type: custom:apexcharts-card
                chart_type: donut
                show:
                  loading: false
                header:
                  show: true
                  show_states: true
                  colorize_states: true
                apex_config:
                  plotOptions:
                    pie:
                      startAngle: -90
                      endAngle: 90
                      offsetY: 0
                      donut:
                        labels:
                          show: true
                          name:
                            offsetY: -75
                            formatter: |
                              EVAL:function(w) {
                                return "Grid in";
                              }
                          value:
                            offsetY: -30
                            fontSize: 50px
                            formatter: |
                              EVAL:function(w) {
                                return (w.globals.series[0]
                                + w.globals.series[1]
                                ).toFixed(1) + " kW";
                              }
                          total:
                            show: true
                            fontSize: 28px
                            color: '#FF4646'
                            formatter: |
                              EVAL:function(w) {
                                return (w.globals.series[0]
                                + w.globals.series[1]
                                ).toFixed(1) + " kW";
                              }
                  chart:
                    height: 450px
                    animations:
                      enabled: true
                      easing: easeinout
                      speed: 800
                      animateGradually:
                        enabled: true
                        delay: 150
                      dynamicAnimation:
                        enabled: true
                        speed: 350
                  stroke:
                    show: true
                    opacity: 0
                  legend:
                    show: false
                  dataLabels:
                    enabled: false
                series:
                  - entity: input_text.power_flow_gauge_grid_to_house
                    name: Self Consumption
                    float_precision: 2
                    color: '#8B4513'
                    unit: ' kW'
                  - entity: input_text.power_flow_gauge_grid_to_battery
                    name: To Battery
                    float_precision: 2
                    color: '#7a50d9'
                    unit: ' kW'
                  - entity: sensor.power_flow_gauge_mean_grid_import
                    name: Diff. to mean.
                    opacity: 0.5
                    color: rgb(50, 50, 50)
                    show:
                      in_header: false
                    data_generator: >
                      return [[new Date().getTime(), Math.max(0,
                      parseFloat(hass.states['sensor.power_flow_gauge_mean_grid_import'].state)
                        - parseFloat(hass.states['input_text.power_flow_gauge_grid_to_house'].state)
                        - parseFloat(hass.states['input_text.power_flow_gauge_grid_to_battery'].state)
                        )]];
                  - entity: sensor.power_flow_gauge_max_grid_import
                    name: Diff. to max.
                    opacity: 0.1
                    color: rgb(50, 50, 50)
                    show:
                      in_header: false
                    data_generator: >
                      return [[new Date().getTime(),
                      parseFloat(hass.states['sensor.power_flow_gauge_max_grid_import'].state) 
                        -Math.max(parseFloat(hass.states['sensor.power_flow_gauge_mean_grid_import'].state),
                          parseFloat(hass.states['input_text.power_flow_gauge_grid_to_house'].state)
                          + parseFloat(hass.states['input_text.power_flow_gauge_grid_to_battery'].state)
                        )]];
                              
                card_mod:
                  style: |
                    ha-card {
                      height: 270px;
                      --apexcharts-xaxis-labels-color: red;
                    }
              - show_name: true
                show_icon: false
                show_state: true
                type: glance
                entities:
                  - entity: sensor.power_flow_gauge_mean_grid_import
                    name: Mean / 24h
                  - entity: sensor.power_flow_gauge_max_grid_import
                    name: Max / 24h
        visibility:
          - condition: numeric_state
            entity: sensor.sigen_pv_power
            below: 0.1001
          - condition: numeric_state
            entity: sensor.sigen_grid_sensor_import_power
            above: 0.1
      - type: grid
        cards:
          - type: vertical-stack
            cards:
              - type: custom:apexcharts-card
                chart_type: donut
                show:
                  loading: false
                header:
                  show: true
                  show_states: true
                  colorize_states: true
                apex_config:
                  plotOptions:
                    pie:
                      startAngle: -90
                      endAngle: 90
                      offsetY: 0
                      donut:
                        labels:
                          show: true
                          name:
                            offsetY: -75
                            formatter: |
                              EVAL:function(w) {
                                  return "Discharging";
                              }
                          value:
                            offsetY: -30
                            fontSize: 50px
                            formatter: |
                              EVAL:function(w) {
                                return (w.globals.series[0]
                                + w.globals.series[1]
                                ).toFixed(1) + " kW";
                              }            
                          total:
                            show: true
                            fontSize: 28px
                            color: '#7a50d9'
                            formatter: |
                              EVAL:function(w) {
                                return (w.globals.series[0]
                                + w.globals.series[1]
                                ).toFixed(1) + " kW";
                              }
                  chart:
                    height: 450px
                    animations:
                      enabled: true
                      easing: easeinout
                      speed: 800
                      animateGradually:
                        enabled: true
                        delay: 150
                      dynamicAnimation:
                        enabled: true
                        speed: 350
                  stroke:
                    show: true
                    opacity: 0
                  legend:
                    show: false
                  dataLabels:
                    enabled: false
                series:
                  - entity: input_text.power_flow_gauge_battery_to_house
                    name: Self Consumption
                    float_precision: 2
                    color: '#8B4513'
                    unit: ' kW'
                  - entity: input_text.power_flow_gauge_battery_to_grid
                    name: To Grid
                    float_precision: 2
                    color: '#FF4646'
                    unit: ' kW'
                  - entity: sensor.power_flow_gauge_mean_battery_discharging
                    name: Diff. to mean.
                    opacity: 0.5
                    color: rgb(50, 50, 50)
                    show:
                      in_header: false
                    data_generator: >
                      return [[new Date().getTime(), Math.max(0,
                      parseFloat(hass.states['sensor.power_flow_gauge_mean_battery_discharging'].state)
                        - parseFloat(hass.states['input_text.power_flow_gauge_battery_to_house'].state)
                        - parseFloat(hass.states['input_text.power_flow_gauge_battery_to_grid'].state)
                        )]];       
                  - entity: sensor.power_flow_gauge_max_battery_discharging
                    name: Diff. to max.
                    opacity: 0.1
                    color: rgb(50, 50, 50)
                    show:
                      in_header: false
                    data_generator: >
                      return [[new Date().getTime(),
                      parseFloat(hass.states['sensor.power_flow_gauge_max_battery_discharging'].state) 
                        -Math.max(parseFloat(hass.states['sensor.power_flow_gauge_mean_battery_discharging'].state),
                          parseFloat(hass.states['input_text.power_flow_gauge_battery_to_house'].state)
                          + parseFloat(hass.states['input_text.power_flow_gauge_battery_to_grid'].state)
                        )]];          
                card_mod:
                  style: |
                    ha-card {
                      height: 270px;
                      --apexcharts-xaxis-labels-color: red;
                    }
              - show_name: true
                show_icon: false
                show_state: true
                type: glance
                entities:
                  - entity: sensor.power_flow_gauge_total_battery_discharging
                    name: Mean / 24h
                  - entity: sensor.power_flow_gauge_max_battery_discharging
                    name: Max / 24h
            visibility:
              - condition: numeric_state
                entity: sensor.sigen_pv_power
                below: 0.1
              - condition: numeric_state
                entity: sensor.sigen_grid_sensor_import_power
                below: 0.1
    cards: []
